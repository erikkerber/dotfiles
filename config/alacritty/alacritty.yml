live_config_reload: true

dpi:
  x: 120.0
  y: 120.0

window:
  startup_mode: Maximized

font:
  normal:
    family: Operator Mono
    style: Medium
  bold:
    style: Bold
  italic:
    style: Italic
  size: 15.0

  use_thin_strokes: false

bell:
  duration: 0

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_multiplier` to 0.
  faux_multiplier: 3

  # Automatically scroll to the bottom when new text is written
  # to the terminal.
  auto_scroll: false

import:
  - ~/.config/alacritty/dracula.yml

    # Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: D,     mods: Command,       chars: "\x02\x25" } 
  - { key: D,     mods: Command|Shift, chars: "\x02\x22" }
  - { key: LBracket, mods: Command, chars: "\x02\x1b\x5b\x43" }
  - { key: RBracket, mods: Command, chars: "\x02\x1b\x5b\x44" }

  - { key: W,     mods: Command,       chars: "\x02\x78" }
  - { key: H,     mods: Command,       chars: "\x02\x68" }
  - { key: J,     mods: Command,       chars: "\x02\x6a" }
    #  - { key: K,     mods: Command,       chars: "\x02\x6b" }
  - { key: L,     mods: Command,       chars: "\x02\x6c" }
  - { key: T,     mods: Command,       chars: "\x02\x63" }
  - { key: Key1,  mods: Command,       chars: "\x02\x31" }
  - { key: Key2,  mods: Command,       chars: "\x02\x32" }
  - { key: Key3,  mods: Command,       chars: "\x02\x33" }
  - { key: Key4,  mods: Command,       chars: "\x02\x34" }
  - { key: Key5,  mods: Command,       chars: "\x02\x35" }
  - { key: Key6,  mods: Command,       chars: "\x02\x36" }
  - { key: Key7,  mods: Command,       chars: "\x02\x37" }
  - { key: Key8,  mods: Command,       chars: "\x02\x38" }
  - { key: Key9,  mods: Command,       chars: "\x02\x39" }
  - { key: Left,  mods: Command,       chars: "\x02\x48" }
  - { key: Down,  mods: Command,       chars: "\x02\x4a" }
  - { key: Up,    mods: Command,       chars: "\x02\x4b" }
  - { key: Right, mods: Command,       chars: "\x02\x4c" }

