[user]
	name = Erik Kerber
	email = ekerber@slack-corp.com
[github]
  user = eskerber
[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  editor = nvim 
  whitespace = trailing-space,space-before-tab
  pager = delta
[hub]
  protocol = https
  host = git.target.com
[init]
  templatedir = ~/.git_template
	defaultBranch = main
[help]
  autocorrect = 1
[push]
  default = current
  autoSetupRemote = true
[fetch]
  prune = true
[branch]
  autosetupmerge = true
[branch "main"]
  pushRemote = AREYOUSURE
[branch "master"]
  pushRemote = AREYOUSURE
[blame]
  date = short
  coloring = highlightRecent
[delta]
  navigate = true
[diff]
  tool = Kaleidoscope
  renames = copies
  mnemonicprefix = true
  algorithm = patience
  indentHeuristic = true
  colorMoved = default
  noprefix = true
[diff "swift"]
  xfuncname = "^ *(\\w+ +)*((class|struct|enum|protocol|extension|func) +|(de)?init\\b).*$"
[difftool]
  prompt = false
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "idiff"]
  cmd = "diff -Nuri -U3 --minimal \"$LOCAL\" \"$REMOTE\" | sed 's/^-/\\x1b[1;31m-/;s/^+/\\x1b[1;32m+/;s/^@/\\x1b[1;34m@/;s/$/\\x1b[0m/' | diff-highlight"
[mergetool "vim"]
  cmd = vim -c "normal\\ gg]c" -f \"$MERGED\"
  prompt = false
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
[mergetool]
  prompt = false
  keepBackup = false
  trustExitCode = true
[merge]
  tool = Kaleidoscope
  keepBackup = false
  log = true
  stat = true
  conflictstyle = diff3
[rerere]
  enabled = true
  autoUpdate = true
[rebase]
  autosquash = true
  autostash = true
  stat = true
[stash]
  showPatch = true
[gpg]
  program = gpg
[commit]
  verbose = true
[submodule]
  fetchJobs = 8
[interactive]
  diffFilter = delta --color-only
[diff "plist"]
  textconv = plutil -convert xml1 -o -
[diff "provision"]
  textconv = security cms -D -i
[diff "exif"]
  textconv = exiftool
[difftool "ksdiff"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool "ksdiff"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"
[status]
  showUntrackedFiles = all
  showStash = true
[sendemail]
  smtpEncryption = tls
  smtpServer = /usr/local/bin/msmtp
  smtpServerOption = -afastmail
[log]
  follow = true
[grep]
  column = true
  lineNumber = true
[advice]
  waitingForEditor = false
[pager]
  branch = false
[pull]
  rebase = true
[credential]
  helper = osxkeychain
[color]
	ui = true
[color "diff-highlight"]
  oldNormal = red
  oldHighlight = red ul
  newNormal = green
  newHighlight = green ul
[color "diff"]
  meta = yellow
  frag = magenta
  commit = yellow
  old = red
  new = green
  whitespace = red reverse
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[alias]
  g           = !exec git
  git         = !exec git
  # add
  a           = add
  ap          = add --patch
  chunkyadd   = add --patch

  # Be Good
  praise      = blame

  # branch
  b           = branch -v
  ba          = branch -a
  cb          = !sh -c 'git checkout --quiet -b $1 && (git push origin $1 --quiet 2> /dev/null && git branch -u origin/$1 $1 --quiet) &' -
  branch      = branch -vv
  branches    = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
  fixmain   = git co -b main upstream/main
  cleanupb    = !sh -c 'git branch -vv >/tmp/merged-branches && vim /tmp/merged-branches && cat /tmp/merged-branches | awk '{print $1}' | xargs git branch -D'

  # checkout
  co          = checkout
  cop         = !sh -c 'git branch | cut -c 3- | fzy --query=$1 | xargs git checkout' -
  copr        = !sh -c 'git branch -r | cut -c 3- | grep -v HEAD | cut -d "/" -f 2 | fzy --query=$1 | xargs git checkout' -
  co-pr       = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -

  # cherry-pick
  cp          = cherry-pick
  cpn         = cherry-pick --no-commit

  # commit
  c           = commit --verbose -m
  ca          = commit --verbose -am
  amend       = commit --verbose --amend
  amendne     = commit --verbose --amend --no-edit
  ane         = amendne
  comf        = commit --verbose --fixup=HEAD

  # diff
  d           = diff                               # diff unstaged changes
  dc          = diff --cached                      # diff staged changes
  last        = diff HEAD^                         # diff last committed change
  dt          = difftool
  dtc         = difftool --cached
  dtk         = difftool --tool=Kaleidoscope
  dtck        = difftool --cached --tool=Kaleidoscope

  # rebase
  ra          = rebase --abort
  rc          = rebase --continue
  rs          = rebase --skip
  rma         = rebase main
  rmi         = rebase main -i

  # reflog
  rl      = reflog -20

  # remote
  r           = remote -v
  f           = fetch
  ps          = push
  punch       = push --force-with-lease
  # Prints the refs only on the remote, suitable for scripting tag cleanup
  remote-tags = "!f() { git ls-remote --refs -t $1 | awk '{print $2}'; }; f"

  # reset
  nuke        = reset --hard HEAD
  undo        = reset --soft HEAD^
  unstage     = reset HEAD
  uncommit    = reset --soft HEAD
  cleann       = clean -f -d

  # merge
  mt          = mergetool

  # stash
  ss          = stash
  sl          = stash list
  sa          = stash apply
  sd          = stash drop
  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # status
  s           = status -sb

  # log
  l           = log -20 --topo-order --pretty='format:%Cblue%h%Creset %s%Cred%d%Creset %C(yellow)(%an)%Creset'
  changes     = log --pretty=format:\"%C(blue)%h%Creset %C(green)%cr%Creset %C(red)%an%Creset %s\" --name-status
  short       = log --pretty=format:\"%C(blue)%h%Creset %<(20)%C(red)%an%Creset%C(green)%cr%Creset %s\"
  long        = log --pretty=format:\"%C(blue)%H%Creset %<(21)%C(red)%an%Creset%C(green)%cr%Creset %<(80,trunc)%s\"
  shortnocolor= log --pretty=format:\"%h %cr %an %s\"
  dylan       = log --diff-filter=R --summary
  klog        = log --author=Kerber # It me
  filelog     = log -u
  lol         = log --graph --decorate --pretty=oneline --abbrev-commit # http://blog.kfish.org/2010/04/git-lola.html
  lola        = log --graph --decorate --pretty=oneline --abbrev-commit --all # http://blog.kfish.org/2010/04/git-lola.html
  scoreboard  = shortlog -sn --since=12.month

  last        = diff HEAD^ HEAD
  last-msg    = !git --no-pager log --format=format:%B -1
  last-sha    = !git --no-pager log --format=format:%H -1
  blog        = log main..HEAD # All commits from main
  
  history     = log -p -M --follow --stat --

  # submodules
  sub         = submodule update --init --recursive

  # tag
  t           = tag -n

  # typos
  g           = !exec git     # Execute Git if the command is accidentally repeated
  git         = !exec git     # Execute Git if the command is accidentally repeated

  # for fun
  wtc         = !sh -c 'git commit $@ -m \""`curl -s http://whatthecommit.com/index.txt`"\"' -

  # Github Enterprise

  # Use this detect if a given SHA-1 is contained in an RC branch, branches containing this
  # revision will be output
  # Example: git rc-check 9209a70b454e03cd103609a33d9ce30e5d3b1402
  rc-check = "!f() { git branch -r --contains $1 | grep -e rc_*; }; f"

  # Use this to fetch the branch of a GitHub PR without needing to add other remotes
  # Example: git fetch-pr 8785
  fetch-pr = "!f() { git fetch upstream pull/$1/head:${2:-pr-$1}; }; f"

  # To Organize
  adeleted    = !sh -c 'git ls-files `git rev-parse --show-toplevel` --deleted -z | xargs -0 git rm -r'
  auntracked  = !sh -c 'git ls-files `git rev-parse --show-toplevel` --others --exclude-standard -z | xargs -0 git add'
  ctags       = !.git/hooks/ctags
  dm          = !sh -c 'git diff $@ $(git merge-base main $(git name-rev --name-only HEAD))' -
  dstash      = !sh -c 'git stash show -p stash@{${1-0}}' -
